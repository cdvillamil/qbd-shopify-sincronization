# Runner: self-hosted Windows x64
# Deploy ZIP con node_modules incluido (fallback a npm install si no hay package-lock.json)

name: Build & Deploy ‚Äî Staging + Prod (ZIP)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

concurrency:
  group: webapp-deploy
  cancel-in-progress: true

jobs:
  build:
    runs-on: [self-hosted, Windows, X64]
    permissions:
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install & Build
        shell: powershell
        run: |
          $ErrorActionPreference = 'Stop'

          if (Test-Path "package-lock.json") {
            Write-Host "üß∞ Encontrado package-lock.json -> usando 'npm ci'"
            npm ci
            if ($LASTEXITCODE -ne 0) { exit $LASTEXITCODE }
          }
          else {
            Write-Host "‚ö†Ô∏è No hay package-lock.json -> usando 'npm install'"
            npm install --no-audit --no-fund
            if ($LASTEXITCODE -ne 0) { exit $LASTEXITCODE }
          }

          npm run build --if-present
          if ($LASTEXITCODE -ne 0) { exit $LASTEXITCODE }

          # Aviso (no rompe el build) para asegurar dependencias de runtime
          if (-not (Test-Path "node_modules\express")) {
            Write-Warning "No se encontr√≥ 'express' en node_modules. Aseg√∫rate de que est√© en 'dependencies' (no en devDependencies)."
          }

      - name: Package ZIP (prod bundle)
        shell: powershell
        run: |
          $ErrorActionPreference = 'Stop'
          Remove-Item -Recurse -Force deploy -ErrorAction SilentlyContinue
          New-Item -ItemType Directory -Path deploy | Out-Null

          # Archivos clave
          Copy-Item package.json, package-lock.json -Destination deploy -ErrorAction SilentlyContinue

          # C√≥digo de la app (ajusta seg√∫n tu estructura)
          if (Test-Path dist) { Copy-Item -Recurse dist -Destination deploy }
          if (Test-Path src)  { Copy-Item -Recurse src  -Destination deploy }
          if (Test-Path index.js)  { Copy-Item index.js  -Destination deploy }
          if (Test-Path server.js) { Copy-Item server.js -Destination deploy }
          if (Test-Path web.config) { Copy-Item web.config -Destination deploy }

          # Dependencias de runtime
          if (-not (Test-Path node_modules)) { Write-Error "No existe node_modules. ¬øFall√≥ la instalaci√≥n?" }
          Copy-Item -Recurse node_modules -Destination deploy

          Compress-Archive -Path deploy\* -DestinationPath app.zip -Force

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: node-app-zip
          path: app.zip

  deploy_staging:
    runs-on: [self-hosted, Windows, X64]
    needs: build
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: node-app-zip

      - name: Deploy to STAGING
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'stagging-qbd-shopify-sincronization'
          package: app.zip
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_STAGING }}

  deploy_production:
    runs-on: [self-hosted, Windows, X64]
    needs: deploy_staging
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: node-app-zip

      - name: Deploy to PRODUCTION
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'qbd-shopify-sincronization'
          package: app.zip
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_PROD }}